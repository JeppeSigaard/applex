function setupEvents(e){e?events.forwardEventsTo(e):CordovaLogger.get().subscribe(events)}function Api(e,r,o){this.platform=e||"ios",this.root=r||path.resolve(__dirname,".."),setupEvents(o);var t,i;try{if(t=fs.readdirSync(this.root).filter(function(e){return e.match(/\.xcodeproj$/i)})[0],!t)throw new CordovaError('The provided path "'+this.root+'" is not a Cordova iOS project.');var n=t.substring(t.lastIndexOf(path.sep)+1,t.indexOf(".xcodeproj"));i=path.join(this.root,n)}catch(e){throw new CordovaError('The provided path "'+this.root+'" is not a Cordova iOS project.')}this.locations={root:this.root,www:path.join(this.root,"www"),platformWww:path.join(this.root,"platform_www"),configXml:path.join(i,"config.xml"),defaultConfigXml:path.join(this.root,"cordova/defaults.xml"),pbxproj:path.join(this.root,t,"project.pbxproj"),xcodeProjDir:path.join(this.root,t),xcodeCordovaProj:i,cordovaJs:"bin/CordovaLib/cordova.js",cordovaJsSrc:"bin/cordova-js-src"}}var fs=require("fs"),path=require("path"),unorm=require("unorm"),projectFile=require("./lib/projectFile"),CordovaError=require("cordova-common").CordovaError,CordovaLogger=require("cordova-common").CordovaLogger,events=require("cordova-common").events,PluginManager=require("cordova-common").PluginManager,Q=require("q"),util=require("util");Api.createPlatform=function(e,r,o,t){setupEvents(t);var i=unorm.nfd(r.name()),n;try{n=require("../../../lib/create").createProject(e,r.packageName(),i,o).then(function(){var r=require(path.resolve(e,"cordova/Api"));return new r("ios",e,t)})}catch(e){throw t.emit("error","createPlatform is not callable from the iOS project API."),e}return n},Api.updatePlatform=function(e,r,o){setupEvents(o);var t;try{t=require("../../../lib/create").updateProject(e,r).then(function(){var r=require(path.resolve(e,"cordova/Api"));return new r("ios",e,o)})}catch(e){throw o.emit("error","updatePlatform is not callable from the iOS project API, you will need to do this manually."),e}return t},Api.prototype.getPlatformInfo=function(){var e={};return e.locations=this.locations,e.root=this.root,e.name=this.platform,e.version=require("./version"),e.projectConfig=this._config,e},Api.prototype.prepare=function(e){return require("./lib/prepare").prepare.call(this,e)},Api.prototype.addPlugin=function(e,r){var o=projectFile.parse(this.locations),t=this;return r=r||{},r.variables=r.variables||{},r.variables.PACKAGE_NAME||(r.variables.PACKAGE_NAME=o.getPackageName()),PluginManager.get(t.platform,t.locations,o).addPlugin(e,r).then(function(){var r=e.getFrameworks(t.platform),o=r.filter(function(e){return"podspec"==e.type});return Q.resolve(o)}).then(function(r){if(!r.length)return Q.resolve();var o=t.locations.root,i=t.locations.xcodeCordovaProj.split("/").pop(),n=require("./lib/Podfile").Podfile,a=require("./lib/PodsJson").PodsJson;events.emit("verbose",'Adding pods since the plugin contained <framework>(s) with type="podspec"');var s=new a(path.join(o,a.FILENAME)),c=new n(path.join(o,n.FILENAME),i);if(r.forEach(function(r){var o={name:r.src,type:r.type,spec:r.spec},t=s.get(o.name);t?(o.spec!==t.spec&&events.emit("warn",e.id+" depends on "+o.name+"@"+o.spec+", which conflicts with another plugin. "+o.name+"@"+t.spec+" is already installed and was not overwritten."),s.increment(o.name)):(o.count=1,s.setJson(o.name,o),c.addSpec(o.name,o.spec))}),s.write(),c.isDirty()){c.write(),events.emit("verbose","Running `pod install` (to install plugins)");var p=require("./lib/check_reqs");return c.install(p.check_cocoapods)}events.emit("verbose","Podfile unchanged, skipping `pod install`")}).thenResolve(!0)},Api.prototype.removePlugin=function(e,r){var o=projectFile.parse(this.locations),t=this;return PluginManager.get(t.platform,t.locations,o).removePlugin(e,r).then(function(){var r=e.getFrameworks(t.platform),o=r.filter(function(e){return"podspec"==e.type});return Q.resolve(o)}).then(function(r){if(!r.length)return Q.resolve();var o=t.locations.root,i=t.locations.xcodeCordovaProj.split("/").pop(),n=require("./lib/Podfile").Podfile,a=require("./lib/PodsJson").PodsJson;events.emit("verbose",'Adding pods since the plugin contained <framework>(s) with type="podspec"');var s=new a(path.join(o,a.FILENAME)),c=new n(path.join(o,n.FILENAME),i);if(r.forEach(function(r){var o={name:r.src,type:r.type,spec:r.spec},t=s.get(o.name);if(t)s.decrement(o.name);else{var i=util.format('plugin "%s" podspec "%s" does not seem to be in pods.json, nothing to remove. Will attempt to remove from Podfile.',e.id,o.name);events.emit("verbose",i)}c.removeSpec(o.name)}),s.write(),c.isDirty()){c.write(),events.emit("verbose","Running `pod install` (to uninstall pods)");var p=require("./lib/check_reqs");return c.install(p.check_cocoapods)}events.emit("verbose","Podfile unchanged, skipping `pod install`")}).thenResolve(!0)},Api.prototype.build=function(e){var r=this;return require("./lib/check_reqs").run().then(function(){return require("./lib/build").run.call(r,e)})},Api.prototype.run=function(e){var r=this;return require("./lib/check_reqs").run().then(function(){return require("./lib/run").run.call(r,e)})},Api.prototype.clean=function(e){var r=this;return require("./lib/check_reqs").run().then(function(){return require("./lib/clean").run.call(r,e)}).then(function(){return require("./lib/prepare").clean.call(r,e)})},Api.prototype.requirements=function(){return require("./lib/check_reqs").check_all()},module.exports=Api;