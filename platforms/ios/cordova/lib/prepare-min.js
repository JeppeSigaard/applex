function updateConfigFile(e,t,r){events.emit("verbose","Generating platform-specific config.xml from defaults for iOS at "+r.configXml),shell.cp("-f",r.defaultConfigXml,r.configXml),t.reapply_global_munge().save_all(),events.emit("verbose","Merging project's config.xml into platform-specific iOS config.xml");var n=new ConfigParser(r.configXml);return xmlHelpers.mergeXml(e.doc.getroot(),n.doc.getroot(),"ios",!0),n.write(),n}function logFileOp(e){events.emit("verbose","  "+e)}function updateWww(e,t){var r=[path.relative(e.root,e.locations.www),path.relative(e.root,t.platformWww)],n=path.join(e.root,"merges","ios");fs.existsSync(n)&&(events.emit("verbose",'Found "merges/ios" folder. Copying its contents into the iOS project.'),r.push(path.join("merges","ios")));var o=path.relative(e.root,t.www);events.emit("verbose","Merging and updating files from ["+r.join(", ")+"] to "+o),FileUpdater.mergeAndUpdateDir(r,o,{rootDir:e.root},logFileOp)}function cleanWww(e,t){var r=path.relative(e,t.www);events.emit("verbose","Cleaning "+r),FileUpdater.mergeAndUpdateDir([],r,{rootDir:e,all:!0},logFileOp)}function updateProject(e,t){var r=unorm.nfd(e.name()),n=e.getAttribute("ios-CFBundleIdentifier")||e.packageName(),o=e.version(),a=path.basename(t.xcodeCordovaProj),i=path.join(t.xcodeCordovaProj,a+"-Info.plist"),s=plist.parse(fs.readFileSync(i,"utf8"));s.CFBundleIdentifier=n,s.CFBundleShortVersionString=o;var c=e.getAttribute("ios-CFBundleVersion")||default_CFBundleVersion(o);s.CFBundleVersion=c,e.getAttribute("defaultlocale")&&(s.CFBundleDevelopmentRegion=e.getAttribute("defaultlocale"));var l=writeATSEntries(e);Object.keys(l).length>0?s.NSAppTransportSecurity=l:delete s.NSAppTransportSecurity,handleOrientationSettings(e,s),updateProjectPlistForLaunchStoryboard(e,s);var d=plist.build(s);return d=d.replace(/<string>[\s\r\n]*<\/string>/g,"<string></string>"),fs.writeFileSync(i,d,"utf-8"),events.emit("verbose",'Wrote out iOS Bundle Identifier "'+n+'" and iOS Bundle Version "'+o+'" to '+i),handleBuildSettings(e,t).then(function(){if(r==a)return events.emit("verbose",'iOS Product Name has not changed (still "'+a+'")'),Q();var e="The product name change (<name> tag) in config.xml is not supported dynamically.\nTo change your product name, you have to remove, then add your ios platform again.\nMake sure you save your plugins beforehand using `cordova plugin save`.\n\tcordova plugin save\n\tcordova platform rm ios\n\tcordova platform add ios\n";return Q.reject(new CordovaError(e))})}function handleOrientationSettings(e,t){switch(getOrientationValue(e)){case"portrait":t.UIInterfaceOrientation=["UIInterfaceOrientationPortrait"],t.UISupportedInterfaceOrientations=["UIInterfaceOrientationPortrait","UIInterfaceOrientationPortraitUpsideDown"],t["UISupportedInterfaceOrientations~ipad"]=["UIInterfaceOrientationPortrait","UIInterfaceOrientationPortraitUpsideDown"];break;case"landscape":t.UIInterfaceOrientation=["UIInterfaceOrientationLandscapeLeft"],t.UISupportedInterfaceOrientations=["UIInterfaceOrientationLandscapeLeft","UIInterfaceOrientationLandscapeRight"],t["UISupportedInterfaceOrientations~ipad"]=["UIInterfaceOrientationLandscapeLeft","UIInterfaceOrientationLandscapeRight"];break;case"all":t.UIInterfaceOrientation=["UIInterfaceOrientationPortrait"],t.UISupportedInterfaceOrientations=["UIInterfaceOrientationPortrait","UIInterfaceOrientationPortraitUpsideDown","UIInterfaceOrientationLandscapeLeft","UIInterfaceOrientationLandscapeRight"],t["UISupportedInterfaceOrientations~ipad"]=["UIInterfaceOrientationPortrait","UIInterfaceOrientationPortraitUpsideDown","UIInterfaceOrientationLandscapeLeft","UIInterfaceOrientationLandscapeRight"];break;case"default":t.UISupportedInterfaceOrientations=["UIInterfaceOrientationPortrait","UIInterfaceOrientationLandscapeLeft","UIInterfaceOrientationLandscapeRight"],t["UISupportedInterfaceOrientations~ipad"]=["UIInterfaceOrientationPortrait","UIInterfaceOrientationPortraitUpsideDown","UIInterfaceOrientationLandscapeLeft","UIInterfaceOrientationLandscapeRight"],delete t.UIInterfaceOrientation}}function handleBuildSettings(e,t){var r=parseTargetDevicePreference(e.getPreference("target-device","ios")),n=e.getPreference("deployment-target","ios");if(!r&&!n)return Q();var o=new xcode.project(t.pbxproj);try{o.parseSync()}catch(e){return Q.reject(new CordovaError("Could not parse project.pbxproj: "+e))}return r&&(events.emit("verbose","Set TARGETED_DEVICE_FAMILY to "+r+"."),o.updateBuildProperty("TARGETED_DEVICE_FAMILY",r)),n&&(events.emit("verbose",'Set IPHONEOS_DEPLOYMENT_TARGET to "'+n+'".'),o.updateBuildProperty("IPHONEOS_DEPLOYMENT_TARGET",n)),fs.writeFileSync(t.pbxproj,o.writeSync(),"utf-8"),Q()}function mapIconResources(e,t){var r=[{dest:"icon-60@2x.png",width:120,height:120},{dest:"icon-60@3x.png",width:180,height:180},{dest:"icon-76.png",width:76,height:76},{dest:"icon-76@2x.png",width:152,height:152},{dest:"icon-small.png",width:29,height:29},{dest:"icon-small@2x.png",width:58,height:58},{dest:"icon-40.png",width:40,height:40},{dest:"icon-40@2x.png",width:80,height:80},{dest:"icon-small@3x.png",width:87,height:87},{dest:"icon.png",width:57,height:57},{dest:"icon@2x.png",width:114,height:114},{dest:"icon-72.png",width:72,height:72},{dest:"icon-72@2x.png",width:144,height:144},{dest:"icon-50.png",width:50,height:50},{dest:"icon-50@2x.png",width:100,height:100},{dest:"icon-83.5@2x.png",width:167,height:167}],n={};return r.forEach(function(r){var o=e.getBySize(r.width,r.height)||e.getDefault();if(o){var a=path.join(t,r.dest);n[a]=o.src}}),n}function getIconsDir(e,t){var r,n=folderExists(path.join(e,t,"Images.xcassets/"));return r=n?path.join(t,"Images.xcassets/AppIcon.appiconset/"):path.join(t,"Resources/icons/")}function updateIcons(e,t){var r=e.projectConfig.getIcons("ios");if(0===r.length)return void events.emit("verbose","This app does not have icons defined");var n=path.relative(e.root,t.xcodeCordovaProj),o=getIconsDir(e.root,n),a=mapIconResources(r,o);events.emit("verbose","Updating icons at "+o),FileUpdater.updatePaths(a,{rootDir:e.root},logFileOp)}function cleanIcons(e,t,r){var n=t.getIcons("ios");if(n.length>0){var o=path.relative(e,r.xcodeCordovaProj),a=getIconsDir(e,o),i=mapIconResources(n,a);Object.keys(i).forEach(function(e){i[e]=null}),events.emit("verbose","Cleaning icons at "+a),FileUpdater.updatePaths(i,{rootDir:e,all:!0},logFileOp)}}function mapSplashScreenResources(e,t){var r=[{dest:"Default~iphone.png",width:320,height:480},{dest:"Default@2x~iphone.png",width:640,height:960},{dest:"Default-Portrait~ipad.png",width:768,height:1024},{dest:"Default-Portrait@2x~ipad.png",width:1536,height:2048},{dest:"Default-Landscape~ipad.png",width:1024,height:768},{dest:"Default-Landscape@2x~ipad.png",width:2048,height:1536},{dest:"Default-568h@2x~iphone.png",width:640,height:1136},{dest:"Default-667h.png",width:750,height:1334},{dest:"Default-736h.png",width:1242,height:2208},{dest:"Default-Landscape-736h.png",width:2208,height:1242}],n={};return r.forEach(function(r){var o=e.getBySize(r.width,r.height);if(o){var a=path.join(t,r.dest);n[a]=o.src}}),n}function getSplashScreensDir(e,t){var r,n=folderExists(path.join(e,t,"Images.xcassets/"));return r=n?path.join(t,"Images.xcassets/LaunchImage.launchimage/"):path.join(t,"Resources/splash/")}function updateSplashScreens(e,t){var r=e.projectConfig.getSplashScreens("ios");if(0===r.length)return void events.emit("verbose","This app does not have splash screens defined");var n=path.relative(e.root,t.xcodeCordovaProj),o=getSplashScreensDir(e.root,n),a=mapSplashScreenResources(r,o);events.emit("verbose","Updating splash screens at "+o),FileUpdater.updatePaths(a,{rootDir:e.root},logFileOp)}function cleanSplashScreens(e,t,r){var n=t.getSplashScreens("ios");if(n.length>0){var o=path.relative(e,r.xcodeCordovaProj),a=getSplashScreensDir(e,o),i=mapIconResources(n,a);Object.keys(i).forEach(function(e){i[e]=null}),events.emit("verbose","Cleaning splash screens at "+a),FileUpdater.updatePaths(i,{rootDir:e,all:!0},logFileOp)}}function mapLaunchStoryboardContents(e,t){var r=[],n=["universal","ipad","iphone"],o={universal:["1x","2x","3x"],ipad:["1x","2x"],iphone:["1x","2x","3x"]},a=["com","any"];return n.forEach(function(n){o[n].forEach(function(o){a.forEach(function(i){a.forEach(function(a){var s={idiom:n,scale:o,width:i,height:a},c="@"+o+"~"+n+"~"+i+a,l=e.reduce(function(e,t){return t.src.indexOf(c)>=0?t:e},void 0);l&&(s.filename="Default"+c+".png",s.src=l.src,s.target=path.join(t,s.filename)),r.push(s)})})})}),r}function mapLaunchStoryboardResources(e,t){var r=mapLaunchStoryboardContents(e,t),n={};return r.forEach(function(e){e.target&&(n[e.target]=e.src)}),n}function getLaunchStoryboardContentsJSON(e,t){var r="compact",n="any",o=mapLaunchStoryboardContents(e,t),a={images:[],info:{author:"Xcode",version:1}};return a.images=o.map(function(e){var t={idiom:e.idiom,scale:e.scale};return e.width!==n&&(t["width-class"]=r),e.height!==n&&(t["height-class"]=r),e.filename&&(t.filename=e.filename),t}),a}function updateProjectPlistForLaunchStoryboard(e,t){var r="UILaunchStoryboardName",n="CDVLaunchScreen",o=e.getSplashScreens("ios"),a=getLaunchStoryboardContentsJSON(o,""),i=t[r];events.emit("verbose","Current launch storyboard "+i);var s=!!a.images.reduce(function(e,t){return void 0!==t.filename?t:e},void 0);return s&&!i?(events.emit("verbose","Changing project to use our launch storyboard"),void(t[r]=n)):s||i!==n?void events.emit("verbose","Not changing launch storyboard setting."):(events.emit("verbose","Changing project to use launch images"),void(t[r]=void 0))}function getLaunchStoryboardImagesDir(e,t){var r,n=folderExists(path.join(e,t,"Images.xcassets/"));return r=n?path.join(t,"Images.xcassets/LaunchStoryboard.imageset/"):null}function updateLaunchStoryboardImages(e,t){var r=e.projectConfig.getSplashScreens("ios"),n=t.xcodeCordovaProj,o=getLaunchStoryboardImagesDir(e.root,n);if(o){var a=mapLaunchStoryboardResources(r,o),i=getLaunchStoryboardContentsJSON(r,o);events.emit("verbose","Updating launch storyboard images at "+o),FileUpdater.updatePaths(a,{rootDir:e.root},logFileOp),events.emit("verbose","Updating Storyboard image set contents.json"),fs.writeFileSync(path.join(o,"contents.json"),JSON.stringify(i,null,2))}}function cleanLaunchStoryboardImages(e,t,r){var n=t.getSplashScreens("ios"),o=r.xcodeCordovaProj,a=getLaunchStoryboardImagesDir(e,o);if(a){var i=mapLaunchStoryboardResources(n,a),s=getLaunchStoryboardContentsJSON(n,a);Object.keys(i).forEach(function(e){i[e]=null}),events.emit("verbose","Cleaning storyboard image set at "+a),FileUpdater.updatePaths(i,{rootDir:e,all:!0},logFileOp),s.images.forEach(function(e){e.filename=void 0}),events.emit("verbose","Updating Storyboard image set contents.json"),fs.writeFileSync(path.join(a,"contents.json"),JSON.stringify(s,null,2))}}function getOrientationValue(e){var t="default",r=e.getPreference("orientation");return r?(r=r.toLowerCase(),["default","portrait","landscape","all"].indexOf(r)>=0?r:(events.emit("warn","Unrecognized value for Orientation preference: "+r+". Defaulting to value: "+t+"."),t)):""}function processAccessAndAllowNavigationEntries(e){var t=e.getAccesses(),r=e.getAllowNavigations();return r.concat(t.map(function(e){return e.href=e.origin,delete e.origin,e})).reduce(function(e,t){var r={minimum_tls_version:t.minimum_tls_version,requires_forward_secrecy:t.requires_forward_secrecy,requires_certificate_transparency:t.requires_certificate_transparency,allows_arbitrary_loads_in_media:t.allows_arbitrary_loads_in_media,allows_arbitrary_loads_in_web_content:t.allows_arbitrary_loads_in_web_content,allows_local_networking:t.allows_local_networking},n=parseWhitelistUrlForATS(t.href,r);if(n){var o=e[n.Hostname];o||(o={});for(var a in n)n.hasOwnProperty(a)&&(o[a]=n[a]);e[n.Hostname]=o}return e},{})}function parseWhitelistUrlForATS(e,t){var r=URL.parse(e),n={};if(n.Hostname=r.hostname,"*"===e){n.Hostname="*";var o;return o="true"===t.allows_arbitrary_loads_in_web_content,t.allows_arbitrary_loads_in_web_content&&o&&(n.NSAllowsArbitraryLoadsInWebContent=!0),o="true"===t.allows_arbitrary_loads_in_media,t.allows_arbitrary_loads_in_media&&o&&(n.NSAllowsArbitraryLoadsInMedia=!0),o="true"===t.allows_local_networking,t.allows_local_networking&&o&&(n.NSAllowsLocalNetworking=!0),n}if(!n.Hostname){var a="/*.",i="*://*.",s="*://";if(0===r.pathname.indexOf(a))n.NSIncludesSubdomains=!0,n.Hostname=r.pathname.substring(a.length);else if(0===r.pathname.indexOf(i))n.NSIncludesSubdomains=!0,n.Hostname=r.pathname.substring(i.length);else{if(0!==r.pathname.indexOf(s))return null;n.Hostname=r.pathname.substring(s.length)}}t.minimum_tls_version&&"TLSv1.2"!==t.minimum_tls_version&&(n.NSExceptionMinimumTLSVersion=t.minimum_tls_version);var c="true"===t.requires_forward_secrecy;t.requires_forward_secrecy&&!c&&(n.NSExceptionRequiresForwardSecrecy=!1);var l="true"===t.requires_certificate_transparency;return t.requires_certificate_transparency&&l&&(n.NSRequiresCertificateTransparency=!0),"http:"===r.protocol?n.NSExceptionAllowsInsecureHTTPLoads=!0:r.protocol||0!==r.pathname.indexOf("*:/")||(n.NSExceptionAllowsInsecureHTTPLoads=!0),n}function writeATSEntries(e){var t=processAccessAndAllowNavigationEntries(e),r={};for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];if("*"===n){r.NSAllowsArbitraryLoads=!0,o.NSAllowsArbitraryLoadsInWebContent&&(r.NSAllowsArbitraryLoadsInWebContent=!0),o.NSAllowsArbitraryLoadsInMedia&&(r.NSAllowsArbitraryLoadsInMedia=!0),o.NSAllowsLocalNetworking&&(r.NSAllowsLocalNetworking=!0);continue}var a={};for(var i in o)o.hasOwnProperty(i)&&"Hostname"!==i&&(a[i]=o[i]);r.NSExceptionDomains||(r.NSExceptionDomains={}),r.NSExceptionDomains[n]=a}return r}function folderExists(e){try{var t=fs.statSync(e);return t&&t.isDirectory()}catch(e){return!1}}function default_CFBundleVersion(e){return e.split("-")[0]}function parseTargetDevicePreference(e){if(!e)return null;var t={universal:'"1,2"',handset:'"1"',tablet:'"2"'};return t[e.toLowerCase()]?t[e.toLowerCase()]:(events.emit("warn","Unrecognized value for target-device preference: "+e+"."),null)}var Q=require("q"),fs=require("fs"),path=require("path"),shell=require("shelljs"),xcode=require("xcode"),unorm=require("unorm"),plist=require("plist"),URL=require("url"),events=require("cordova-common").events,xmlHelpers=require("cordova-common").xmlHelpers,ConfigParser=require("cordova-common").ConfigParser,CordovaError=require("cordova-common").CordovaError,PlatformJson=require("cordova-common").PlatformJson,PlatformMunger=require("cordova-common").ConfigChanges.PlatformMunger,PluginInfoProvider=require("cordova-common").PluginInfoProvider,FileUpdater=require("cordova-common").FileUpdater;module.exports.prepare=function(e,t){var r=this,n=PlatformJson.load(this.locations.root,"ios"),o=new PlatformMunger("ios",this.locations.root,n,new PluginInfoProvider);return this._config=updateConfigFile(e.projectConfig,o,this.locations),Q.when(updateWww(e,this.locations)).then(function(){return updateProject(r._config,r.locations)}).then(function(){updateIcons(e,r.locations),updateSplashScreens(e,r.locations),updateLaunchStoryboardImages(e,r.locations)}).then(function(){events.emit("verbose","Prepared iOS project successfully")})},module.exports.clean=function(e){var t=path.resolve(this.root,"../.."),r=path.join(t,"config.xml");if(e&&e.noPrepare||!fs.existsSync(r)||!fs.existsSync(this.locations.configXml))return Q();var n=new ConfigParser(this.locations.configXml),o=this;return Q().then(function(){cleanWww(t,o.locations),cleanIcons(t,n,o.locations),cleanSplashScreens(t,n,o.locations),cleanLaunchStoryboardImages(t,n,o.locations)})};